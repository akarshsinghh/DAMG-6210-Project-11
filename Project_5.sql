select SYSDATE from dual;

SET SERVEROUTPUT ON;

DECLARE
    constr all_constraints.constraint_name%TYPE;
BEGIN
    FOR constr IN (
        SELECT
            constraint_name
        FROM
            all_constraints
        WHERE
                table_name = 'D'
            AND owner = 'TRANEE'
    ) LOOP
        EXECUTE IMMEDIATE 'alter table D disable constraint ' || constr.constraint_name;
    END LOOP;
END;
/

BEGIN
    FOR rec IN (
        SELECT
            table_name
        FROM
            user_tables
        WHERE
            NOT REGEXP_LIKE ( table_name,
                              'keep_tab1|keep_tab2|^ASB' )
    ) LOOP
        BEGIN
            EXECUTE IMMEDIATE 'drop table '
                              || rec.table_name
                              || ' cascade constraints';
        EXCEPTION
            WHEN OTHERS THEN
                dbms_output.put_line(rec.table_name
                                     || ':'
                                     || sqlerrm);
        END;
    END LOOP;
END;
/

CREATE TABLE loan (
    loanaccnumber  NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 12345678 INCREMENT BY 1) PRIMARY KEY,
    customer_id    INT
        CONSTRAINT positive_customer_id CHECK ( customer_id > 0 ),
    loanifsc       CHAR(11) NOT NULL,
    principal      DECIMAL(10, 2) NOT NULL
        CONSTRAINT positive_principal CHECK ( principal > 0 ),
    outstanding    DECIMAL(10, 2)
        CONSTRAINT positive_outstanding CHECK ( outstanding > 0 ),
    loan_type      NUMBER(1) CHECK ( loan_type > 0 ) NOT NULL,
    status         VARCHAR(20),
    approved_by_id INT,
    sanction_date  DATE,
    duration       DECIMAL(4, 2),
    CONSTRAINT check_loan_period CHECK ( duration BETWEEN 0 AND 50 ),
    CONSTRAINT left_to_pay CHECK ( principal > outstanding )
);

CREATE TABLE loan_transactions (
    loan_trans_id    NUMBER
        GENERATED BY DEFAULT AS IDENTITY (START WITH 100 INCREMENT BY 1)
    PRIMARY KEY,
    branchifsc       CHAR(11) NOT NULL,
    loanifsc         CHAR(11) NOT NULL,
    loanaccnumber    NUMBER NOT NULL,
    amount           DECIMAL(10, 2) NOT NULL
        CONSTRAINT positive_amount CHECK ( amount > 0 ),
    transaction_date DATE NOT NULL
);

CREATE TABLE loan_interest (
    interest_id   NUMBER
        GENERATED BY DEFAULT AS IDENTITY (START WITH 100 INCREMENT BY 1)
    PRIMARY KEY,
    loanaccnumber NUMBER NOT NULL,
    branchifsc    CHAR(11) NOT NULL,
    loan_type     NUMBER(1),
    deposit_date  DATE NOT NULL
);

CREATE TABLE account_interest (
    interest_id    INT
        GENERATED ALWAYS AS IDENTITY,
    account_number NUMBER NOT NULL,
    branchifsc     VARCHAR(11) NOT NULL,
    created_date   DATE NOT NULL,
    PRIMARY KEY ( interest_id )
);

CREATE TABLE account_status (
    status_id      INT
        GENERATED ALWAYS AS IDENTITY,
    account_number NUMBER NOT NULL,
    status         VARCHAR(20) NOT NULL,
    created_date   DATE NOT NULL,
    PRIMARY KEY ( status_id )
);

CREATE TABLE works_with (
    customer_id  INT NOT NULL,
    employee_id  INT NOT NULL,
    relationship VARCHAR(20),
    PRIMARY KEY ( customer_id,
                  employee_id )
);

CREATE TABLE branch_supplier (
    supplier_id   INT PRIMARY KEY,
    supplier_name VARCHAR(20) NOT NULL,
    supplier_type VARCHAR(20),
    branch_id     NUMBER
);

CREATE TABLE employee (
    employee_id   NUMBER NOT NULL,
    branch_id     NUMBER(10, 0) NOT NULL,
    department    VARCHAR2(20 BYTE) NOT NULL,
    first_name    VARCHAR2(20 BYTE) NOT NULL,
    last_name     VARCHAR2(20 BYTE),
    sex           CHAR(1),
    dob           DATE,
    salary        NUMBER(10, 2),
    emp_role      VARCHAR2(20 BYTE),
    email_id      VARCHAR2(40 BYTE) UNIQUE,
    contact_no    NUMBER(10, 0) NOT NULL UNIQUE,
    supervisor_id NUMBER,
    CONSTRAINT "EMP_EMPLOYEE_ID" CHECK ( employee_id > 0 ),
    CONSTRAINT "EMP_BRANCH_ID" CHECK ( branch_id > 0 ),
    CONSTRAINT "GENDER_CHECK" CHECK ( sex IN ( 'F', 'M', 'O' ) ),
    CONSTRAINT "SAL_CHECK" CHECK ( salary > 0 ),
    CONSTRAINT "CONTACT_CHECK" CHECK ( length(contact_no) = 10 ),
    PRIMARY KEY ( "EMPLOYEE_ID" )
);

CREATE TABLE transactions (
    tansaction_id    INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1999999999999 INCREMENT BY 1) PRIMARY KEY,
    debit_account    NUMBER,
    credit_account   NUMBER,
    ifsc_code_debit  CHAR(11),
    ifsc_code_credit CHAR(11),
    amount           DECIMAL(10, 2) NOT NULL
        CONSTRAINT amt_check CHECK ( amount > 0 ),
    transaction_date DATE,
    message          VARCHAR(100),
    status           VARCHAR(20)
);

CREATE TABLE customer (
    customer_id INT GENERATED BY DEFAULT AS IDENTITY (START WITH 300000 INCREMENT BY 1) PRIMARY KEY,
    first_name  VARCHAR(20) NOT NULL,
    last_name   VARCHAR(20) NOT NULL,
    dob         DATE,
    works_at    VARCHAR(20),
    sex         VARCHAR(1)
        CONSTRAINT genders CHECK ( sex IN ( 'M', 'F', 'O' ) ),
    apt_no      VARCHAR(20),
    street      VARCHAR(20),
    city        VARCHAR(20),
    cstate      VARCHAR(2),
    zipcode     INT
        CONSTRAINT zip_length CHECK ( length(zipcode) = 5 ),
    phone       INT UNIQUE
        CONSTRAINT phone_length CHECK ( length(phone) = 10 )
);

CREATE TABLE account (
    accountnumber   NUMBER GENERATED BY DEFAULT AS IDENTITY (start with 1234567891234567 increment by 1) NOT NULL,
    account_type    VARCHAR(20) NOT NULL,
    branchifsc      CHAR(11) NOT NULL,
    customer_id     INT,
    account_balance DECIMAL(10,2) NOT NULL
        CONSTRAINT balance_positive CHECK ( account_balance > 0 ),
    PRIMARY KEY ( accountnumber )
);

CREATE TABLE loan_type (
    loan_type     NUMBER(1) PRIMARY KEY CHECK ( loan_type > 0 ),
    interest_rate DECIMAL(4, 2)
        CONSTRAINT positive_interest_rate CHECK ( interest_rate > 0 ),
    category      VARCHAR(20) NOT NULL
);

CREATE TABLE branch (
    branchifsc CHAR(11) PRIMARY KEY
        CONSTRAINT elevenchar CHECK ( length(branchifsc) = 11 ),
    branch_id  INT UNIQUE,
    address    VARCHAR(20) NOT NULL,
    street     VARCHAR(20) NOT NULL,
    city       VARCHAR(20) NOT NULL,
    state      CHAR(2) NOT NULL,
    zipcode    INT,
    manager_id INT
        CONSTRAINT positive_manager_id CHECK ( manager_id > 0 )
);

-- Branch (NO FK)

-- Branch Supplier
ALTER TABLE branch_supplier
    ADD CONSTRAINT fk_branch_id FOREIGN KEY ( branch_id )
        REFERENCES branch ( branch_id )
            ON DELETE CASCADE;

-- Transactions
ALTER TABLE transactions
    ADD CONSTRAINT fk_debit_account FOREIGN KEY ( debit_account )
        REFERENCES account ( accountnumber )
            ON DELETE CASCADE;

ALTER TABLE transactions
    ADD CONSTRAINT fk_credit_account FOREIGN KEY ( credit_account )
        REFERENCES account ( accountnumber )
            ON DELETE CASCADE;

-- Account Status
ALTER TABLE account_status
    ADD CONSTRAINT fk_acc_number FOREIGN KEY ( account_number )
        REFERENCES account ( accountnumber)
            ON DELETE CASCADE;

-- Account Interest
ALTER TABLE account_interest
    ADD CONSTRAINT fk_accinterest_acc_number FOREIGN KEY ( account_number )
        REFERENCES account ( accountnumber )
            ON DELETE CASCADE;

-- Account
ALTER TABLE account
    ADD CONSTRAINT fk_account_customer_id FOREIGN KEY ( customer_id )
        REFERENCES customer ( customer_id )
            ON DELETE CASCADE;

-- Loan
ALTER TABLE loan
    ADD CONSTRAINT fk_customer_id FOREIGN KEY ( customer_id )
        REFERENCES customer ( customer_id )
            ON DELETE CASCADE;

ALTER TABLE loan
    ADD CONSTRAINT fk_loan_type FOREIGN KEY ( loan_type )
        REFERENCES loan_type ( loan_type )
            ON DELETE CASCADE;

ALTER TABLE loan
    ADD CONSTRAINT fk_loan_ifsc FOREIGN KEY ( loanifsc )
        REFERENCES branch ( branchifsc )
            ON DELETE CASCADE;

ALTER TABLE loan
    ADD CONSTRAINT fk_sanction_id FOREIGN KEY ( approved_by_id )
        REFERENCES employee ( employee_id )
            ON DELETE CASCADE;

-- Loan Transactions

ALTER TABLE loan_transactions
    ADD CONSTRAINT fk_lifsc FOREIGN KEY ( loanifsc )
        REFERENCES branch ( branchifsc )
            ON DELETE CASCADE;

ALTER TABLE loan_transactions
    ADD CONSTRAINT fk_loanaccnumber FOREIGN KEY ( loanaccnumber )
        REFERENCES loan ( loanaccnumber )
            ON DELETE CASCADE;

-- Loan Interest
ALTER TABLE loan_interest
    ADD CONSTRAINT fk_interest_loanaccnumber FOREIGN KEY ( loanaccnumber )
        REFERENCES loan ( loanaccnumber )
            ON DELETE CASCADE;

ALTER TABLE loan_interest
    ADD CONSTRAINT fk_loan_interest_ifsc FOREIGN KEY ( branchifsc )
        REFERENCES branch ( branchifsc )
            ON DELETE CASCADE;

ALTER TABLE loan_interest
    ADD CONSTRAINT fk_loan_interst_loan_type FOREIGN KEY ( loan_type )
        REFERENCES loan_type ( loan_type )
            ON DELETE CASCADE;
--
-- Loan_Type (NO FK) 

-- Works With
ALTER TABLE works_with
    ADD CONSTRAINT fk_works_with_emp FOREIGN KEY ( employee_id )
        REFERENCES employee ( employee_id )
            ON DELETE CASCADE;

ALTER TABLE works_with
    ADD CONSTRAINT fk_works_with_customer FOREIGN KEY ( customer_id )
        REFERENCES customer ( customer_id )
            ON DELETE CASCADE;

-- Employee
ALTER TABLE employee
    ADD CONSTRAINT fk_emp_branch FOREIGN KEY ( branch_id )
        REFERENCES branch ( branch_id )
            ON DELETE CASCADE;

-- Customer (NO FK)

-- Data Inserting Branch
INSERT INTO branch VALUES (
    'DMDD0454500',
    1,
    '405 Huntington Ave',
    'Park Street',
    'Boston',
    'MA',
    02120,
    012324
);

INSERT INTO branch VALUES (
    'DMDD0101022',
    2,
    '111 Howard Ave',
    'Tremont Street',
    'Boston',
    'MA',
    02180,
    055564
);

INSERT INTO branch VALUES (
    'DMDD0333100',
    3,
    '333 Longwood Ave',
    'Milk Street',
    'Boston',
    'MA',
    02190,
    037567
);

-- Branch Supplier

INSERT INTO branch_supplier VALUES (
    1,
    'Secure Tech',
    'Security',
    1
);

INSERT INTO branch_supplier VALUES (
    2,
    'Paper and Co',
    'Envelops',
    2
);

INSERT INTO branch_supplier VALUES (
    3,
    'Baggit',
    'Fabric Bag',
    3
);

INSERT INTO branch_supplier VALUES (
    4,
    'Electroplast',
    'Hardware',
    1
);

INSERT INTO branch_supplier VALUES (
    5,
    'HomeDepot',
    'Stationary',
    2
);

INSERT INTO branch_supplier VALUES (
    6,
    'BestBuy',
    ' ',
    3
);

-- Data Inserting Employee
INSERT INTO employee VALUES (
    012324,
    1,
    'Research',
    'Akarsh',
    'Singh',
    'M',
    TO_DATE('1999-03-09', 'YYYY-MM-DD'),
    120000,
    'Branch Manager',
    'akarshsinghh@gmail.com',
    7710037766,
    ''
);

INSERT INTO employee VALUES (
    055564,
    2,
    'Sales',
    'Alex',
    'ONeil',
    'M',
    TO_DATE('1997-10-06', 'YYYY-MM-DD'),
    115000,
    'Branch Manager',
    'neilalex32@gmail.com',
    8910037766,
    ''
);

INSERT INTO employee VALUES (
    037567,
    3,
    'Sales',
    'Kylie',
    'James',
    'F',
    TO_DATE('1992-11-01', 'YYYY-MM-DD'),
    130000,
    'Branch Manager',
    'thekyliejames@outlook.com',
    8910032459,
    ''
);

INSERT INTO employee VALUES (
    036940,
    3,
    'Sales',
    'Megan',
    'Smith',
    'F',
    TO_DATE('1999-06-30', 'YYYY-MM-DD'),
    67000,
    'Accountant',
    'megans30@outlook.com',
    8910076403,
    037567
);

INSERT INTO employee VALUES (
    036113,
    3,
    'Software',
    'Ravi',
    'Teja',
    'M',
    TO_DATE('1998-06-13', 'YYYY-MM-DD'),
    90000,
    'Developer',
    'tejaravi_tv@gmail.com',
    8570076403,
    ''
);

INSERT INTO employee VALUES (
    036999,
    3,
    'Sales',
    'Charlottee',
    'Malik',
    'F',
    TO_DATE('1997-02-12', 'YYYY-MM-DD'),
    75000,
    'Relationship Officer',
    'mcharlottee@outlook.com',
    8579076403,
    037567
);

INSERT INTO employee VALUES (
    036941,
    3,
    'Marketing',
    'Chang',
    'Cho',
    'O',
    TO_DATE('1995-03-24', 'YYYY-MM-DD'),
    77000,
    'Head',
    'chochangg@outlook.com',
    8910076507,
    ''
);

INSERT INTO employee VALUES (
    036942,
    3,
    'Operations',
    'John',
    'Ledger',
    'M',
    TO_DATE('1998-06-17', 'YYYY-MM-DD'),
    85000,
    'Associate',
    'johnl@yahoo.com',
    8910071122,
    011818
);

INSERT INTO employee VALUES (
    036933,
    3,
    'Operations',
    'Mark',
    'Benetton',
    'M',
    TO_DATE('1997-10-30', 'YYYY-MM-DD'),
    84000,
    'Associate',
    'markbene@outlook.com',
    8910072241,
    011818
);

INSERT INTO employee VALUES (
    011818,
    3,
    'Operations',
    'Grace',
    'Fernandes',
    'F',
    TO_DATE('1982-09-27', 'YYYY-MM-DD'),
    93000,
    'Senior Associate',
    'gracefernandes30@gmail.com',
    8910078979,
    037567
);

INSERT INTO employee VALUES (
    056940,
    2,
    'Sales',
    'Josh',
    'Jacobs',
    'M',
    TO_DATE('1987-07-18', 'YYYY-MM-DD'),
    69000,
    'Accountant',
    'srjjacobs@outlook.com',
    7120076403,
    055564
);

INSERT INTO employee VALUES (
    056941,
    2,
    'Sales',
    'Megan',
    'Smith',
    'F',
    TO_DATE('1999-06-30', 'YYYY-MM-DD'),
    67000,
    'Accountant',
    'megansmithh@yahoo.com',
    7770076403,
    055564
);

INSERT INTO employee VALUES (
    056942,
    2,
    'Operations',
    'Elle',
    'Bridge',
    'F',
    TO_DATE('1996-08-29', 'YYYY-MM-DD'),
    72000,
    'Associate',
    'bridgeelle101@outlook.com',
    8880072403,
    059999
);

INSERT INTO employee VALUES (
    056943,
    2,
    'Operations',
    'Blake',
    'Springer',
    'M',
    TO_DATE('1994-06-30', 'YYYY-MM-DD'),
    87000,
    'Associate',
    'springer.blake@gmail.com',
    8999076403,
    059999
);

INSERT INTO employee VALUES (
    059999,
    2,
    'Operations',
    'Ajit',
    'Poonawala',
    'O',
    TO_DATE('1975-10-21', 'YYYY-MM-DD'),
    105000,
    'Lead Associate',
    'poonawal.ajit1@gmail.com',
    8999076400,
    055564
);

INSERT INTO employee VALUES (
    016940,
    1,
    'Sales',
    'Ram',
    'Charan',
    'M',
    TO_DATE('1986-04-18', 'YYYY-MM-DD'),
    69000,
    'Accountant',
    'rcharan@outlook.com',
    8120076403,
    012324
);

INSERT INTO employee VALUES (
    016941,
    1,
    'Sales',
    'Sharvi',
    'Jaffery',
    'F',
    TO_DATE('1999-04-17', 'YYYY-MM-DD'),
    67000,
    'Accountant',
    'sharvijj@gmail.com',
    8770076403,
    012324
);

INSERT INTO employee VALUES (
    016942,
    1,
    'Operations',
    'Darren',
    'Franco',
    'M',
    TO_DATE('1993-08-29', 'YYYY-MM-DD'),
    77000,
    'Associate',
    'd.franco@outlook.com',
    8780076403,
    019999
);

INSERT INTO employee VALUES (
    016943,
    1,
    'Operations',
    'Cherry',
    'Chan',
    'O',
    TO_DATE('1997-01-05', 'YYYY-MM-DD'),
    72000,
    'Associate',
    'chancherry05@gmail.com',
    7699076403,
    019999
);

INSERT INTO employee VALUES (
    019999,
    1,
    'Operations',
    'Nick',
    'Bilzerian',
    'M',
    TO_DATE('1971-11-22', 'YYYY-MM-DD'),
    107000,
    'Lead Associate',
    'bilznick71@gmail.com',
    8000076403,
    012324
);

INSERT INTO employee VALUES (
    100101,
    1,
    'Insurance',
    'Ayushi',
    'Patel',
    'F',
    DATE '1980-11-08',
    25000,
    'Accountant',
    'ayushipatel@gmail.com',
    7856912345,
    012324
);

INSERT INTO employee VALUES (
    101101,
    1,
    'Insurance',
    'Ruchika',
    'Sinha',
    'F',
    DATE '1983-10-08',
    25000,
    'Accountant',
    'ruchika19gmail.com',
    7856912389,
    012324
);

INSERT INTO employee VALUES (
    102101,
    2,
    'Credit cards',
    'Akshit',
    'Arora',
    'M',
    DATE '1990-10-08',
    60000,
    'clerk',
    'akshit20arora@gmail.com',
    7856912333,
    055564
);

INSERT INTO employee VALUES (
    199111,
    3,
    'Credit cards',
    'Eddy',
    'Sharma',
    'M',
    DATE '1980-05-08',
    50000,
    'Provisionary Officer',
    'eddysharma123@gmail.com',
    9999988889,
    037567
);

INSERT INTO employee VALUES (
    104131,
    1,
    'Insurance',
    'Aditya',
    'Tilak',
    'M',
    DATE '1989-10-08',
    50000,
    'Banker',
    'adityatilak@gmail.com',
    7856912322,
    012324
);

INSERT INTO employee VALUES (
    105534,
    3,
    'Private banking',
    'Megshi',
    'Thakur',
    'F',
    DATE '1980-11-08',
    50000,
    'Clerk',
    'megshithakur@gmail.com',
    7856912344,
    037567
);

INSERT INTO employee VALUES (
    105745,
    2,
    'Credit cards',
    'Rinita',
    'Srivastva',
    'F',
    DATE '1967-10-08',
    50000,
    'Provisionary Officer',
    'rini@yahoo.com',
    7856913214,
    055564
);

INSERT INTO employee VALUES (
    107310,
    3,
    'Credit cards',
    'Sneha',
    'Mohan',
    'F',
    DATE '1999-10-08',
    90000,
    'Accountant',
    'sneha@yahoo.com',
    7856913213,
    037567
);

INSERT INTO employee VALUES (
    109557,
    2,
    'Insurance',
    'Sidhant',
    'Kohli',
    'M',
    DATE '1995-10-04',
    30000,
    'LIC',
    'sid@yahoo.com',
    7856913220,
    055564
);

INSERT INTO employee VALUES (
    110644,
    3,
    'Private banking',
    'Yash',
    'Navadiya',
    'M',
    DATE '1989-10-08',
    30000,
    'Accountant',
    'yash@yahoo.com',
    7856913221,
    037567
);

INSERT INTO employee VALUES (
    111101,
    1,
    'Private banking',
    'Virendra',
    'Singh',
    'M',
    DATE '1986-10-08',
    70000,
    'Clerk',
    'viv@yahoo.com',
    7856913229,
    012324
);

INSERT INTO employee VALUES (
    113104,
    2,
    'Insurance',
    'Radhika',
    'Madan',
    'F',
    DATE '1981-10-08',
    70000,
    'LIC',
    'radhika@yahoo.com',
    7856913005,
    055564
);

INSERT INTO employee VALUES (
    114107,
    1,
    'Private banking',
    'Boney',
    'Singh',
    'M',
    DATE '1980-10-08',
    70000,
    'LIC',
    'bon@yahoo.com',
    7856913008,
    02324
);

INSERT INTO employee VALUES (
    115005,
    3,
    'Private banking',
    'Disha',
    'Parmar',
    'F',
    DATE '1968-10-07',
    70000,
    'LIC',
    'disha@yahoo.com',
    7856913007,
    037567
);

INSERT INTO employee VALUES (
    118202,
    2,
    'Private banking',
    'Barkha',
    'Duta',
    'F',
    DATE '1966-11-08',
    70000,
    'Banker',
    'barkhadutt@yahoo.com',
    7856913777,
    055564
);

INSERT INTO employee VALUES (
    119324,
    1,
    'Private banking',
    'Mrinal',
    'Sharma',
    'F',
    DATE '1967-10-08',
    70000,
    'Banker',
    'mrinal42@yahoo.com',
    7856914007,
    012324
);

INSERT INTO employee VALUES (
    120424,
    1,
    'Private banking',
    'Apsara',
    'Sharma',
    'F',
    DATE '1964-10-08',
    70000,
    'Banker',
    'mrinal@yahoo.com',
    7856914003,
    012324
);

-- Customer
INSERT INTO customer VALUES (
    100000,
    'John',
    'Sander',
    TO_DATE('1998-05-19', 'YYYY-MM-DD'),
    'NE',
    'M',
    '14',
    'Calumet St',
    'Boston',
    'MA',
    '12345',
    '9999999999'
);

INSERT INTO customer VALUES (
    100001,
    'Adam',
    'Levine',
    TO_DATE('1990-04-18', 'YYYY-MM-DD'),
    'NE',
    'M',
    '14',
    'Milk Street',
    'Boston',
    'MA',
    '12345',
    '9658365933'
);

INSERT INTO customer VALUES (
    100002,
    'Josh',
    'Curry',
    TO_DATE('1990-03-13', 'YYYY-MM-DD'),
    'NE',
    'M',
    '15',
    'Park Street',
    'Boston',
    'MA',
    '12345',
    '8572212077'
);

INSERT INTO customer VALUES (
    100003,
    'Lakshana',
    'Kolur',
    TO_DATE('1997-02-14', 'YYYY-MM-DD'),
    'SE',
    'F',
    '05',
    'South End Street',
    'Boston',
    'MA',
    '12345',
    '7575838485'
);

INSERT INTO customer VALUES (
    100004,
    'Clara',
    'Goerge',
    TO_DATE('1972-03-19', 'YYYY-MM-DD'),
    'SE',
    'F',
    '03',
    'Hill Road',
    'Boston',
    'MA',
    '12345',
    '7863542435'
);

INSERT INTO customer VALUES (
    100005,
    'Meghan',
    'Ritter',
    TO_DATE('1973-06-16', 'YYYY-MM-DD'),
    'NE',
    'F',
    '14',
    'Carter Street',
    'Boston',
    'MA',
    '12345',
    '8755235554'
);

INSERT INTO customer VALUES (
    100006,
    'Rajdeep',
    'Mamtani',
    TO_DATE('1979-03-12', 'YYYY-MM-DD'),
    'SE',
    'M',
    '14',
    'Mac Street',
    'Allston',
    'MA',
    '12345',
    '7843563450'
);

INSERT INTO customer VALUES (
    100007,
    'Sonal',
    'Singh',
    TO_DATE('1988-01-18', 'YYYY-MM-DD'),
    'SE',
    'F',
    '23',
    'Shipman Street',
    'Allston',
    'MA',
    '12345',
    '8954398443'
);

INSERT INTO customer VALUES (
    100008,
    'Jayashree',
    'Kumari',
    TO_DATE('1984-06-14', 'YYYY-MM-DD'),
    'SE',
    'F',
    '14',
    'India Street',
    'Allston',
    'MA',
    '12345',
    '9787837854'
);

INSERT INTO customer VALUES (
    100009,
    'Harper',
    'Selter',
    TO_DATE('1966-06-06', 'YYYY-MM-DD'),
    'SE',
    'F',
    '11',
    'Mass Ave',
    'Cambridge',
    'MA',
    '12345',
    '9827354354'
);

INSERT INTO customer VALUES (
    100010,
    'Amol',
    'Srivatsav',
    TO_DATE('1987-05-09', 'YYYY-MM-DD'),
    'SE',
    'O',
    '08',
    'Dennis Ave',
    'Cambridge',
    'MA',
    '12345',
    '9873455445'
);

INSERT INTO customer VALUES (
    100011,
    'Abhimanyu',
    'Sarda',
    TO_DATE('1990-05-12', 'YYYY-MM-DD'),
    'NE',
    'O',
    '14',
    'Huntington Ave',
    'Cambridge',
    'MA',
    '12345',
    '8754493433'
);

INSERT INTO customer VALUES (
    100012,
    'Amy',
    'Hazarika',
    TO_DATE('1987-05-11', 'YYYY-MM-DD'),
    'NE',
    'F',
    '14',
    '7th Ave',
    'Cambridge',
    'MA',
    '12345',
    '9865489380'
);

INSERT INTO customer VALUES (
    100013,
    'Tracy',
    'Zelensky',
    TO_DATE('1988-05-12', 'YYYY-MM-DD'),
    'SE',
    'F',
    '14',
    'Light Road',
    'Boston',
    'MA',
    '12345',
    '7893548993'
);

INSERT INTO customer VALUES (
    100014,
    'Sharron',
    'Naim',
    TO_DATE('1988-07-13', 'YYYY-MM-DD'),
    'SE',
    'F',
    '14',
    'Sea Street',
    'Boston',
    'MA',
    '12345',
    '8889876543'
);

INSERT INTO customer VALUES (
    100015,
    'Charlie',
    'Watson',
    TO_DATE('1990-02-10', 'YYYY-MM-DD'),
    'NE',
    'F',
    '14',
    '13th Street',
    'Amherst',
    'MA',
    '12345',
    '7878676887'
);

INSERT INTO customer VALUES (
    100016,
    'Mrinal',
    'Kumar',
    TO_DATE('1991-08-08', 'YYYY-MM-DD'),
    'NE',
    'M',
    '14',
    'Curry Road',
    'Amherst',
    'MA',
    '12345',
    '7665687670'
);

INSERT INTO customer VALUES (
    100017,
    'Margot',
    'Pincha',
    TO_DATE('1996-03-13', 'YYYY-MM-DD'),
    'SE',
    'F',
    '21',
    'Belmont St',
    'Amherst',
    'MA',
    '12345',
    '8765432109'
);

INSERT INTO customer VALUES (
    100019,
    'Sowmya',
    'Raghavan',
    TO_DATE('1994-04-19', 'YYYY-MM-DD'),
    'NE',
    'M',
    '14',
    'Oak Road',
    'Amherst',
    'MA',
    '12345',
    '8765409876'
);

INSERT INTO customer VALUES (
    100020,
    'Anukriti',
    'Joshi',
    TO_DATE('1989-03-15', 'YYYY-MM-DD'),
    'NE',
    'M',
    '14',
    'Darling St',
    'Cambridge',
    'MA',
    '12345',
    '8754290454'
);

--Account 
INSERT INTO account VALUES (
    3719713158855555,
    'Savings',
    'DMDD0454500',
    100000,
    16500
);

INSERT INTO account VALUES (
    13719713158835300,
    'Savings',
    'DMDD0454500',
    100001,
    1500
);

INSERT INTO account VALUES (
    71086643758945400,
    'Savings',
    'DMDD0101022',
    100002,
    2090
);

INSERT INTO account VALUES (
    3690859741294280,
    'Savings',
    'DMDD0454500',
    100003,
    8056
);

INSERT INTO account VALUES (
    37530666568966100,
    'Savings',
    'DMDD0333100',
    100004,
    3098
);

INSERT INTO account VALUES (
    70048841700216300,
    'Savings',
    'DMDD0454500',
    100005,
    5054
);

INSERT INTO account VALUES (
    89135767380499400,
    'Savings',
    'DMDD0101022',
    100006,
    25456
);

INSERT INTO account VALUES (
    12494980148173100,
    'Checking',
    'DMDD0333100',
    100007,
    300
);

INSERT INTO account VALUES (
    8744336085399580,
    'Checking',
    'DMDD0101022',
    100008,
    1100
);

INSERT INTO account VALUES (
    64289489845768000,
    'Checking',
    'DMDD0454500',
    100009,
    10516
);

INSERT INTO account VALUES (
    70149340835549500,
    'Checking',
    'DMDD0333100',
    100010,
    10538
);

INSERT INTO account VALUES (
    1359713158835400,
    'Savings',
    'DMDD0333100',
    100011,
    1564.96
);

INSERT INTO account VALUES (
    7599713158835400,
    'Savings',
    'DMDD0454500',
    100012,
    18000.56
);

INSERT INTO account VALUES (
    9009713158835400,
    'Savings',
    'DMDD0101022',
    100013,
    7795
);

INSERT INTO account VALUES (
    1212713158835400,
    'Savings',
    'DMDD0333100',
    100014,
    900.99
);

INSERT INTO account VALUES (
    8880713158835400,
    'Savings',
    'DMDD0454500',
    100015,
    3486
);

INSERT INTO account VALUES (
    1289713158835400,
    'Savings',
    'DMDD0101022',
    100016,
    4200
);

INSERT INTO account VALUES (
    9560713158835400,
    'Savings',
    'DMDD0333100',
    100017,
    34600
);

INSERT INTO account VALUES (
    3719713158839988,
    'Savings',
    'DMDD0101022',
    100019,
    13003
);

INSERT INTO account VALUES (
    3719713158837659,
    'Savings',
    'DMDD0333100',
    100020,
    6305
);



INSERT INTO account VALUES (
    1086643758945400,
    'Checking',
    'DMDD0454500',
    100012,
    10516
);

INSERT INTO account VALUES (
    53153834006064000,
    'Checking',
    'DMDD0333100',
    100013,
    10538
);

--Account Interest

INSERT INTO account_interest (
    account_number,
    branchifsc,
    created_date
) VALUES (
    13719713158835300,
    'DMDD0454500',
    '01-JAN-21'
);

INSERT INTO account_interest (
    account_number,
    branchifsc,
    created_date
) VALUES (
    71086643758945400,
    'DMDD0101022',
    '01-FEB-21'
);

INSERT INTO account_interest (
    account_number,
    branchifsc,
    created_date
) VALUES (
    3690859741294280,
    'DMDD0454500',
    '01-MAR-21'
);

INSERT INTO account_interest (
    account_number,
    branchifsc,
    created_date
) VALUES (
    37530666568966100,
    'DMDD0333100',
    '01-APR-21'
);

INSERT INTO account_interest (
    account_number,
    branchifsc,
    created_date
) VALUES (
    70048841700216300,
    'DMDD0454500',
    '01-MAY-21'
);

INSERT INTO account_interest (
    account_number,
    branchifsc,
    created_date
) VALUES (
    89135767380499400,
    'DMDD0101022',
    '01-JUN-21'
);

INSERT INTO account_interest (
    account_number,
    branchifsc,
    created_date
) VALUES (
    12494980148173100,
    'DMDD0333100',
    '01-JUL-21'
);

INSERT INTO account_interest (
    account_number,
    branchifsc,
    created_date
) VALUES (
    8744336085399580,
    'DMDD0101022',
    '01-AUG-21'
);

INSERT INTO account_interest (
    account_number,
    branchifsc,
    created_date
) VALUES (
    64289489845768000,
    'DMDD0454500',
    '01-SEP-21'
);

INSERT INTO account_interest (
    account_number,
    branchifsc,
    created_date
) VALUES (
    70149340835549500,
    'DMDD0333100',
    '01-OCT-21'
);

INSERT INTO account_interest (
    account_number,
    branchifsc,
    created_date
) VALUES (
    8880713158835400,
    'DMDD0454500',
    '01-JAN-21'
);

--Account Status

INSERT INTO account_status (
    account_number,
    status,
    created_date
) VALUES (
    13719713158835300,
    'Active',
    '05-JAN-19'
);

INSERT INTO account_status (
    account_number,
    status,
    created_date
) VALUES (
    71086643758945400,
    'Active',
    '09-FEB-20'
);

INSERT INTO account_status (
    account_number,
    status,
    created_date
) VALUES (
    3690859741294280,
    'Active',
    '08-MAR-20'
);

INSERT INTO account_status (
    account_number,
    status,
    created_date
) VALUES (
    37530666568966100,
    'Active',
    '07-APR-20'
);

INSERT INTO account_status (
    account_number,
    status,
    created_date
) VALUES (
    70048841700216300,
    'Active',
    '06-MAY-19'
);

INSERT INTO account_status (
    account_number,
    status,
    created_date
) VALUES (
    89135767380499400,
    'Active',
    '05-JUN-21'
);

INSERT INTO account_status (
    account_number,
    status,
    created_date
) VALUES (
    12494980148173100,
    'Active',
    '04-JUL-18'
);

INSERT INTO account_status (
    account_number,
    status,
    created_date
) VALUES (
    8744336085399580,
    'Active',
    '03-AUG-21'
);

INSERT INTO account_status (
    account_number,
    status,
    created_date
) VALUES (
    64289489845768000,
    'Active',
    '02-SEP-20'
);

INSERT INTO account_status (
    account_number,
    status,
    created_date
) VALUES (
    70149340835549500,
    'Active',
    '21-OCT-19'
);

insert into account_status (account_number,status,created_date)values (7599713158835400,'Active','12-05-19');
insert into account_status (account_number,status,created_date)values (3719713158855555,'Active','12-12-19');
insert into account_status (account_number,status,created_date)values (9009713158835400,'Active','01-11-19');
insert into account_status (account_number,status,created_date)values (1289713158835400,'Active','18-09-20');
insert into account_status (account_number,status,created_date)values (1212713158835400,'Active','15-07-19');
insert into account_status (account_number,status,created_date)values (13719713158835300,'Active','12-05-20');
insert into account_status (account_number,status,created_date)values (7599713158835400,'Active','12-05-19');
insert into account_status (account_number,status,created_date)values (3719713158839988,'Active','12-05-19');
insert into account_status (account_number,status,created_date)values (53153834006064000,'Active','12-05-19');
insert into account_status (account_number,status,created_date)values (9560713158835400,'Active','27-09-18');
insert into account_status (account_number,status,created_date)values (3719713158837659,'Active','30-04-20');
insert into account_status (account_number,status,created_date)values (1359713158835400,'Active','17-11-18');
insert into account_status (account_number,status,created_date)values (1086643758945400,'Active','06-01-21');
insert into account_status (account_number,status,created_date)values (8880713158835400,'Active','22-02-20');

--Loan Type

INSERT INTO loan_type VALUES (
    1,
    5.50,
    'Personal Loan'
);

INSERT INTO loan_type VALUES (
    2,
    10.00,
    'Home Loan'
);

INSERT INTO loan_type VALUES (
    3,
    8.00,
    'Business Loan'
);

INSERT INTO loan_type VALUES (
    4,
    7.50,
    'Education Loan'
);
-- Loan
INSERT INTO loan VALUES (
    44689319,
    100000,
    'DMDD0333100',
    500,
    399,
    1,
    'Active',
    100101,
    TO_DATE('2021-01-09', 'YYYY-MM-DD'),
    5.50
);

INSERT INTO loan VALUES (
    77489838,
    100001,
    'DMDD0101022',
    2000,
    800,
    2,
    'Active',
    104131,
    TO_DATE('2020-03-11', 'YYYY-MM-DD'),
    10.00
);

INSERT INTO loan VALUES (
    63892734,
    100002,
    'DMDD0454500',
    690,
    0.1,
    3,
    'Inactive',
    056942,
    TO_DATE('2015-05-20', 'YYYY-MM-DD'),
    8.00
);

INSERT INTO loan VALUES (
    63234734,
    100003,
    'DMDD0101022',
    8090,
    5070,
    1,
    'Active',
    016940,
    TO_DATE('2018-10-10', 'YYYY-MM-DD'),
    5.50
);

INSERT INTO loan VALUES (
    18467484,
    100004,
    'DMDD0454500',
    5000,
    0.1,
    2,
    'Inactive',
    036942,
    TO_DATE('2021-11-20', 'YYYY-MM-DD'),
    10.00
);

INSERT INTO loan VALUES (
    13892736,
    100005,
    'DMDD0333100',
    2000,
    800,
    3,
    'Active',
    019999,
    TO_DATE('2010-09-20', 'YYYY-MM-DD'),
    8.00
);

INSERT INTO loan VALUES (
    53892734,
    100006,
    'DMDD0101022',
    600,
    500,
    4,
    'Active',
    102101,
    TO_DATE('2019-06-02', 'YYYY-MM-DD'),
    7.50
);

INSERT INTO loan VALUES (
    61292734,
    100007,
    'DMDD0454500',
    20000,
    10000,
    2,
    'Active',
    115005,
    TO_DATE('2019-05-10', 'YYYY-MM-DD'),
    10.00
);

INSERT INTO loan VALUES (
    61292799,
    100008,
    'DMDD0101022',
    24000,
    18000,
    2,
    'Active',
    115005,
    TO_DATE('2019-05-10', 'YYYY-MM-DD'),
    10.00
);

--Loan Transactions

INSERT INTO loan_transactions VALUES (
    1,
    'DMDD0333100',
    'DMDD0333100',
    44689319,
    30,
    TO_DATE('2021-02-06', 'YYYY-MM-DD')
);

INSERT INTO loan_transactions VALUES (
    2,
    'DMDD0333100',
    'DMDD0333100',
    44689319,
    30,
    TO_DATE('2021-03-06', 'YYYY-MM-DD')
);

INSERT INTO loan_transactions VALUES (
    3,
    'DMDD0333100',
    'DMDD0333100',
    44689319,
    39,
    TO_DATE('2021-04-06', 'YYYY-MM-DD')
);

INSERT INTO loan_transactions VALUES (
    4,
    'DMDD0101022',
    'DMDD0101022',
    77489838,
    600,
    TO_DATE('2020-11-06', 'YYYY-MM-DD')
);

INSERT INTO loan_transactions VALUES (
    5,
    'DMDD0101022',
    'DMDD0101022',
    77489838,
    600,
    TO_DATE('2021-11-06', 'YYYY-MM-DD')
);

INSERT INTO loan_transactions VALUES (
    6,
    'DMDD0454500',
    'DMDD0454500',
    63892734,
    689.99,
    TO_DATE('2021-11-06', 'YYYY-MM-DD')
);

INSERT INTO loan_transactions VALUES (
    7,
    'DMDD0101022',
    'DMDD0101022',
    63234734,
    1200,
    TO_DATE('2018-11-06', 'YYYY-MM-DD')
);

INSERT INTO loan_transactions VALUES (
    8,
    'DMDD0101022',
    'DMDD0101022',
    63234734,
    1200,
    TO_DATE('2019-10-06', 'YYYY-MM-DD')
);

INSERT INTO loan_transactions VALUES (
    9,
    'DMDD0101022',
    'DMDD0101022',
    63234734,
    620,
    TO_DATE('2020-10-06', 'YYYY-MM-DD')
);

INSERT INTO loan_transactions VALUES (
    10,
    'DMDD0454500',
    'DMDD0454500',
    18467484,
    2500,
    TO_DATE('2021-12-06', 'YYYY-MM-DD')
);

INSERT INTO loan_transactions VALUES (
    11,
    'DMDD0454500',
    'DMDD0454500',
    18467484,
    2499.99,
    TO_DATE('2022-02-06', 'YYYY-MM-DD')
);

-- TRANSACTIONS

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1203876940301,
    13719713158835300,
    1086643758945400,
    'DMDD0454500',
    'DMDD0101022',
    '20.00',
    DATE '2021-03-08',
    'sent $20',
    'Success'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1103876940301,
    53153834006064000,
    3719713158855555,
    'DMDD0101022',
    'DMDD0454500',
    '40.00',
    DATE '2021-04-11',
    'Amount $40 Transferred',
    'Success'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1103876940302,
    37530666568966100,
    70048841700216300,
    'DMDD0333100',
    'DMDD0454500',
    '250.00',
    DATE '2022-10-10',
    'sent $250',
    'Pending'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1203876940303,
    89135767380499400,
    12494980148173100,
    'DMDD0101022',
    'DMDD0333100',
    '50.00',
    DATE '2020-11-08',
    'sent $50',
    'Success'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1203876940304,
    8744336085399580,
    64289489845768000,
    'DMDD0101022',
    'DMDD0454500',
    '330.00',
    DATE '2021-04-08',
    'sent $330',
    'Success'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1203876940305,
    70149340835549500,
    13719713158835300,
    'DMDD0333100',
    'DMDD0454500',
    '150.00',
    DATE '2020-05-18',
    'sent $150',
    'Success'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1203876940306,
    9560713158835400,
    9009713158835400,
    'DMDD0454500',
    'DMDD0101022',
    '120.00',
    DATE '2021-02-23',
    'sent $120',
    'Success'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1103876940307,
    53153834006064000,
    3690859741294280,
    'DMDD0101022',
    'DMDD0454500',
    '400.00',
    DATE '2020-08-05',
    'Amount $400 Transferred',
    'Success'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1103876940308,
    37530666568966100,
    70048841700216300,
    'DMDD0333100',
    'DMDD0454500',
    '500.00',
    DATE '2022-01-18',
    'sent $500',
    'Success'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1203876940309,
    89135767380499400,
    12494980148173100,
    'DMDD0101022',
    'DMDD0333100',
    '350.00',
    DATE '2021-07-28',
    'sent $350',
    'Success'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1203876940310,
    8744336085399580,
    64289489845768000,
    'DMDD0101022',
    'DMDD0454500',
    '444.00',
    DATE '2021-10-04',
    'sent $444',
    'Success'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1203876940311,
    70149340835549500,
    13719713158835300,
    'DMDD0333100',
    'DMDD0454500',
    '100.00',
    DATE '2021-02-11',
    'sent $100',
    'Success'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1203876940312,
    13719713158835300,
    1086643758945400,
    'DMDD0454500',
    'DMDD0101022',
    '1000.00',
    DATE '2021-06-08',
    'sent $1000',
    'Success'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1103876940313,
    53153834006064000,
    3690859741294280,
    'DMDD0101022',
    'DMDD0454500',
    '700.00',
    DATE '2021-08-29',
    'Amount $700 Transferred',
    'Success'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1103876940314,
    37530666568966100,
    70048841700216300,
    'DMDD0333100',
    'DMDD0454500',
    '750.00',
    DATE '2021-10-10',
    'sent $750',
    'Pending'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1203876940315,
    89135767380499400,
    12494980148173100,
    'DMDD0101022',
    'DMDD0333100',
    '55.00',
    DATE '2020-11-09',
    'sent $55',
    'Success'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1203876940316,
    8744336085399580,
    64289489845768000,
    'DMDD0101022',
    'DMDD0454500',
    '360.00',
    DATE '2021-06-03',
    'sent $360',
    'Success'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1203876940317,
    70149340835549500,
    13719713158835300,
    'DMDD0333100',
    'DMDD0454500',
    '66.00',
    DATE '2020-09-03',
    'sent $66',
    'Success'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1203876940318,
    13719713158835300,
    1086643758945400,
    'DMDD0454500',
    'DMDD0101022',
    '45.00',
    DATE '2021-08-01',
    'sent $450',
    'Success'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1103876940319,
    53153834006064000,
    3690859741294280,
    'DMDD0101022',
    'DMDD0454500',
    '600.00',
    DATE '2021-01-01',
    'Amount $600 Transferred',
    'Success'
);

INSERT INTO transactions (
    tansaction_id,
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    1103876940320,
    37530666568966100,
    70048841700216300,
    'DMDD0333100',
    'DMDD0454500',
    '60.00',
    DATE '2022-04-13',
    'sent $60',
    'Success'
);

INSERT INTO transactions (
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    13719713158835300,
    1086643758945400,
    'DMDD0454500',
    'DMDD0101022',
    '20.00',
    DATE '2021-03-09',
    'sent $20',
    'Success'
);

INSERT INTO transactions (
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    53153834006064000,
    3719713158855555,
    'DMDD0101022',
    'DMDD0454500',
    '40.00',
    DATE '2021-04-11',
    'Amount $40 Transferred',
    'Success'
);

INSERT INTO transactions (

    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (

    37530666568966100,
    70048841700216300,
    'DMDD0333100',
    'DMDD0454500',
    '250.00',
    DATE '2022-10-10',
    'sent $250',
    'Pending'
);

INSERT INTO transactions (

    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (

    89135767380499400,
    12494980148173100,
    'DMDD0101022',
    'DMDD0333100',
    '50.00',
    DATE '2021-11-08',
    'sent $50',
    'Success'
);

INSERT INTO transactions (

    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (

    8744336085399580,
    64289489845768000,
    'DMDD0101022',
    'DMDD0454500',
    '330.00',
    DATE '2022-04-08',
    'sent $330',
    'Success'
);

INSERT INTO transactions (

    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (

    70149340835549500,
    13719713158835300,
    'DMDD0333100',
    'DMDD0454500',
    '150.00',
    DATE '2020-05-18',
    'sent $150',
    'Success'
);

INSERT INTO transactions (

    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    9560713158835400,
    9009713158835400,
    'DMDD0454500',
    'DMDD0101022',
    '120.00',
    DATE '2021-02-23',
    'sent $120',
    'Success'
);

INSERT INTO transactions (
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    53153834006064000,
    3690859741294280,
    'DMDD0101022',
    'DMDD0454500',
    '400.00',
    DATE '2020-08-05',
    'Amount $400 Transferred',
    'Success'
);

INSERT INTO transactions (
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    37530666568966100,
    70048841700216300,
    'DMDD0333100',
    'DMDD0454500',
    '500.00',
    DATE '2022-01-18',
    'sent $500',
    'Success'
);

INSERT INTO transactions (
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    89135767380499400,
    12494980148173100,
    'DMDD0101022',
    'DMDD0333100',
    '350.00',
    DATE '2021-07-28',
    'sent $350',
    'Success'
);

INSERT INTO transactions (
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    8744336085399580,
    64289489845768000,
    'DMDD0101022',
    'DMDD0454500',
    '444.00',
    DATE '2021-10-04',
    'sent $444',
    'Success'
);

INSERT INTO transactions (
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (

    70149340835549500,
    13719713158835300,
    'DMDD0333100',
    'DMDD0454500',
    '100.00',
    DATE '2021-02-11',
    'sent $100',
    'Success'
);

INSERT INTO transactions (
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    13719713158835300,
    1086643758945400,
    'DMDD0454500',
    'DMDD0101022',
    '1000.00',
    DATE '2021-03-11',
    'sent $1000',
    'Success'
);

INSERT INTO transactions (
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (

    53153834006064000,
    3690859741294280,
    'DMDD0101022',
    'DMDD0454500',
    '700.00',
    DATE '2021-08-29',
    'Amount $700 Transferred',
    'Success'
);

INSERT INTO transactions (
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    37530666568966100,
    70048841700216300,
    'DMDD0333100',
    'DMDD0454500',
    '750.00',
    DATE '2021-10-10',
    'sent $750',
    'Pending'
);

INSERT INTO transactions (
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    89135767380499400,
    12494980148173100,
    'DMDD0101022',
    'DMDD0333100',
    '55.00',
    DATE '2021-11-09',
    'sent $55',
    'Success'
);

INSERT INTO transactions (
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    8744336085399580,
    64289489845768000,
    'DMDD0101022',
    'DMDD0454500',
    '360.00',
    DATE '2021-10-03',
    'sent $360',
    'Success'
);

INSERT INTO transactions (
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    70149340835549500,
    13719713158835300,
    'DMDD0333100',
    'DMDD0454500',
    '66.00',
    DATE '2020-09-03',
    'sent $66',
    'Success'
);


INSERT INTO transactions (
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    53153834006064000,
    3690859741294280,
    'DMDD0101022',
    'DMDD0454500',
    '600.00',
    DATE '2021-01-01',
    'Amount $600 Transferred',
    'Success'
);

INSERT INTO transactions (
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    37530666568966100,
    70048841700216300,
    'DMDD0333100',
    'DMDD0454500',
    '60.00',
    DATE '2022-04-13',
    'sent $60',
    'Success'
);

INSERT INTO transactions (
    credit_account,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    3690859741294280,
    'DMDD0454500',
    '1000.00',
    DATE '2020-03-08',
    'Deposit of $1000',
    'Success'
);

INSERT INTO transactions (
    credit_account,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    37530666568966100,
    'DMDD0333100',
    '2000.00',
    DATE '2020-04-07',
    'Deposit of $2000',
    'Success'
);

INSERT INTO transactions (
    credit_account,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    70048841700216300,
    'DMDD0454500',
    '2000.00',
    DATE '2019-05-06',
    'Deposit of $2000',
    'Success'
);

INSERT INTO transactions (
    credit_account,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    89135767380499400,
    'DMDD0101022',
    '2000.00',
    DATE '2021-06-05',
    'Deposit of $2000',
    'Success'
);

INSERT INTO transactions (
    credit_account,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    12494980148173100,
    'DMDD0333100',
    '2300.00',
    DATE '2018-07-04',
    'Deposit of $2300',
    'Success'
);

INSERT INTO transactions (
    credit_account,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    8744336085399580,
    'DMDD0101022',
    '2000.00',
    DATE '2021-08-03',
    'Deposit of $2000',
    'Success'
);

INSERT INTO transactions (
    credit_account,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    64289489845768000,
    'DMDD0454500',
    '2100.00',
    DATE '2021-09-02',
    'Deposit of $2100',
    'Success'
);

INSERT INTO transactions (
    credit_account,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    70149340835549500,
    'DMDD0333100',
    '2200.00',
    DATE '2019-10-21',
    'Deposit of $2200',
    'Success'
);

INSERT INTO transactions (
    credit_account,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    71086643758945400,
    'DMDD0101022',
    '2200.00',
    DATE '2020-02-09',
    'Deposit of $2200',
    'Success'
);


INSERT INTO transactions (
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    71086643758945400,
    70149340835549500,
    'DMDD0101022',
    'DMDD0333100',
    '350.00',
    DATE '2020-03-10',
    'sent $350',
    'Success'
);

INSERT INTO transactions (
    credit_account,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    13719713158835300,
    'DMDD0454500',
    '2000.00',
    DATE '2019-01-05',
    'Deposit of $2000',
    'Success'
);


--  Works With

INSERT INTO works_with VALUES (
    100000,
    100101,
    'Loan Manager'
);

INSERT INTO works_with VALUES (
    100001,
    104131,
    'Loan Manager'
);

INSERT INTO works_with VALUES (
    100002,
    056942,
    'Loan Approval'
);

INSERT INTO works_with VALUES (
    100003,
    016940,
    'Loan Manager'
);

INSERT INTO works_with VALUES (
    100004,
    036942,
    'Loan Approval'
);

INSERT INTO works_with VALUES (
    100005,
    019999,
    'Loan Manager'
);

INSERT INTO works_with VALUES (
    100006,
    102101,
    'Loan Manager'
);

INSERT INTO works_with VALUES (
    100007,
    115005,
    'Loan Manager'
);

INSERT INTO works_with VALUES (
    100008,
    102101,
    'Account Manager'
);

INSERT INTO works_with VALUES (
    100009,
    012324,
    'Account Manager'
);

INSERT INTO works_with VALUES (
    100010,
    105534,
    'Account Manager'
);

INSERT INTO works_with VALUES (
    100011,
    107310,
    'Account Manager'
);

INSERT INTO works_with VALUES (
    100012,
    100101,
    'Account Manager'
);

INSERT INTO works_with VALUES (
    100013,
    056940,
    'Account Manager'
);

INSERT INTO works_with VALUES (
    100014,
    115005,
    'Account Manager'
);

INSERT INTO works_with VALUES (
    100015,
    120424,
    'Account Manager'
);

INSERT INTO works_with VALUES (
    100016,
    118202,
    'Account Manager'
);

INSERT INTO works_with VALUES (
    100017,
    110644,
    'Account Manager'
);

INSERT INTO works_with VALUES (
    100019,
    109557,
    'Account Manager'
);

-- LOAN INTEREST
INSERT INTO loan_interest VALUES (
    1,
    44689319,
    'DMDD0333100',
    1,
    TO_DATE('2021-05-09', 'YYYY-MM-DD')
);

INSERT INTO loan_interest VALUES (
    2,
    77489838,
    'DMDD0101022',
    2,
    TO_DATE('2020-09-12', 'YYYY-MM-DD')
);

INSERT INTO loan_interest VALUES (
    3,
    63892734,
    'DMDD0454500',
    3,
    TO_DATE('2019-11-20', 'YYYY-MM-DD')
);

INSERT INTO loan_interest VALUES (
    4,
    63234734,
    'DMDD0101022',
    1,
    TO_DATE('2020-06-10', 'YYYY-MM-DD')
);

INSERT INTO loan_interest VALUES (
    5,
    18467484,
    'DMDD0454500',
    2,
    TO_DATE('2019-11-20', 'YYYY-MM-DD')
);

INSERT INTO loan_interest VALUES (
    6,
    13892736,
    'DMDD0333100',
    3,
    TO_DATE('2020-01-02', 'YYYY-MM-DD')
);

INSERT INTO loan_interest VALUES (
    7,
    53892734,
    'DMDD0101022',
    4,
    TO_DATE('2020-10-11', 'YYYY-MM-DD')
);

INSERT INTO loan_interest VALUES (
    8,
    61292734,
    'DMDD0454500',
    2,
    TO_DATE('2019-11-10', 'YYYY-MM-DD')
);

INSERT INTO loan_interest VALUES (
    9,
    18467484,
    'DMDD0454500',
    2,
    TO_DATE('2021-12-20', 'YYYY-MM-DD')
);

INSERT INTO loan_interest VALUES (
    10,
    13892736,
    'DMDD0333100',
    3,
    TO_DATE('2021-03-22', 'YYYY-MM-DD')
);

    
-- Number of Employees who work under a specific supervisor (REPORT)

SELECT
    employee_id,
    first_name
    || ' '
    || last_name AS name,
    department,
    emp_under,
    salary
FROM
    (
        SELECT
            *
        FROM
                 (
                SELECT
                    supervisor_id,
                    COUNT(*) AS emp_under
                FROM
                    employee
                GROUP BY
                    supervisor_id
            ) emp
            INNER JOIN employee e ON e.employee_id = emp.supervisor_id
    )
ORDER BY
    salary DESC,
    emp_under DESC;

-- Top 3 Customer from every branch who have the highest account balance

SELECT
    *
FROM
    (
        SELECT
            t.*,
            DENSE_RANK()
            OVER(PARTITION BY branch_id
                 ORDER BY
                     account_balance DESC
            ) AS rank
        FROM
            (
                SELECT
                    c.customer_id,
                    c.first_name
                    || ' '
                    || last_name AS name,
                    c.street,
                    c.city,
                    c.account_balance,
                    b.branch_id
                FROM
                    (
                        SELECT
                            c.*,
                            a.account_balance,
                            a.branchifsc
                        FROM
                                 customer c
                            INNER JOIN account a ON c.customer_id = a.customer_id
                    )      c
                    LEFT JOIN branch b ON b.branchifsc = c.branchifsc
            ) t
    )
WHERE
    rank <= 3;

-- Potential Defaulters (REPORT)

SELECT
    customer.first_name,
    customer.last_name,
    customer.customer_id,
    account.account_balance,
    loan.outstanding AS debt
FROM
         customer
    INNER JOIN account ON customer.customer_id = account.customer_id
    INNER JOIN loan ON customer.customer_id = loan.customer_id
WHERE
    account.account_balance < loan.outstanding / 10;

-- total money lent by branch, loan count, accounts at branch summary (REPORT)

SELECT
    branch_id,
    city,
    zipcode,
    loan_count,
    total_debt,
    branch_accounts
FROM
    (
        SELECT
            *
        FROM
            (
                SELECT
                    b.branchifsc,
                    b.branch_id,
                    b.city,
                    b.zipcode,
                    l.loan_count
                FROM
                    branch b
                    RIGHT JOIN (
                        SELECT
                            loanifsc,
                            COUNT(*) AS loan_count
                        FROM
                            loan
                        GROUP BY
                            loanifsc
                    )      l ON b.branchifsc = l.loanifsc
            ) lc
            LEFT JOIN (
                SELECT
                    loanifsc,
                    SUM(outstanding) AS total_debt
                FROM
                    loan
                GROUP BY
                    loanifsc
            ) td ON lc.branchifsc = td.loanifsc
            LEFT JOIN (
                SELECT
                    branchifsc,
                    COUNT(*) branch_accounts
                FROM
                    account
                GROUP BY
                    branchifsc
            ) ba ON lc.branchifsc = ba.branchifsc
    );
    
commit;

-- VIEWS


Create or REPLACE View "Branch Details" AS 
Select BranchIFSC, Branch_ID FROM Branch where State='MA' ; 
select * from "Branch Details";
/



create or replace VIEW EMPLOYEEE_BRANCHDETAILS AS
SELECT Branch.Branch_ID, Branch.BranchIFSC, EMPLOYEE.Employee_ID, EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME, EMPLOYEE.EMP_ROLE
FROM Branch 
INNER JOIN EMPLOYEE 
ON EMPLOYEE.Branch_ID=Branch.Branch_ID
order by Branch_ID;
select * from employeee_branchdetails;
/



Create or replace view Branch_info 
AS
SELECT
count(Distinct account.AccountNumber) AS Number_of_account,
Round(Sum(account.account_balance),2) as Total_account,
Round(AVG(account.account_balance),2) as average_balance,
branch_id
FROM 
Branch
inner join Account 
on branch.branchIFSC=account.branchIFSC
group by branch_id;
select * from Branch_info;
/



-- FUNCTIONS

-- FUNCTION TO CHECK FOR NUMBER/STRING

CREATE OR REPLACE FUNCTION is_number (p_string IN VARCHAR2)
   RETURN INT
IS
   v_new_num NUMBER;
BEGIN
   v_new_num := TO_NUMBER(p_string);
   RETURN 1;
EXCEPTION
WHEN VALUE_ERROR THEN
   RETURN 0;
END is_number;
/


-- TRIGGERS

-- TRIGGER TO UPDATE PENDING TRANSACTIONS

create or replace TRIGGER trans_update 
AFTER INSERT ON transactions
BEGIN
  UPDATE transactions 
  SET status = 'Sucess'
  WHERE (select sysdate from dual)-transaction_date  > 2;
END;
/

-- PROCEDURES

-- PROCEDURE FOR MONEY TRANSFER

set serveroutput on;
--exec moneytransfer(89135767380499400,'DMDD0101022',12494980148173100,'DMDD0333100',1);
create or replace procedure moneytransfer (
    i_debit_acc   transactions.debit_account%TYPE,
    i_debit_ifsc   transactions.ifsc_code_debit%TYPE,
    i_credit_acc   transactions.credit_account%TYPE,
    i_credit_ifsc   transactions.ifsc_code_credit%TYPE,
    i_amount account.account_balance%TYPE
    
) AS
    e_length exception;
    insufficient_balance exception;
    e_ifsc exception;
    invalidacc exception;
    v_dacc number;
    v_cacc number;
    v_difsc varchar(20);
    v_cifsc varchar(20);
    v_amount account.account_balance%TYPE;
    tdate date;


BEGIN

select accountnumber into v_dacc from account where accountnumber=i_debit_acc;
select accountnumber into v_cacc from account where accountnumber=i_credit_acc;
select branchifsc into v_difsc from account where accountnumber = i_debit_acc;
select branchifsc into v_cifsc from account where accountnumber = i_credit_acc;
select account_balance into v_amount from account where accountnumber = i_debit_acc;
select sysdate into tdate from dual;
if length(i_debit_acc) > 10 and length(i_credit_acc) > 10 then
dbms_output.put_line('Length Validated');
else
raise e_length;
end if;

if  v_dacc=i_debit_acc and v_cacc=i_credit_acc then
dbms_output.put_line('Account Numbers Have Sucessfully been Validated');
dbms_output.put_line('..');
dbms_output.put_line('......');
dbms_output.put_line('.............');
else
raise invalidacc;
end if;

if (v_difsc=i_debit_ifsc and v_cifsc=i_credit_ifsc) then
dbms_output.put_line('Both IFSC Codes Match With The Respective Bank Accounts');
dbms_output.put_line('..');
dbms_output.put_line('......');
dbms_output.put_line('.............');
else
raise e_ifsc;
end if;

if(v_amount > i_amount) then

INSERT INTO transactions (
    debit_account,
    credit_account,
    ifsc_code_debit,
    ifsc_code_credit,
    amount,
    transaction_date,
    message,
    status
) VALUES (
    i_debit_acc,
    i_credit_acc,
    i_debit_ifsc,
    i_credit_ifsc,
    i_amount,
    tdate,
    'sent money $',
    'Pending'
);
commit;
dbms_output.put_line('Transaction Successful!');
dbms_output.put_line('...');
dbms_output.put_line('........');
UPDATE account
SET account_balance = account_balance - i_amount
WHERE accountnumber = i_debit_acc;

UPDATE account
SET account_balance = account_balance + i_amount
WHERE accountnumber = i_credit_acc;
dbms_output.put_line('Balances Updated!');



else
raise insufficient_balance;
end if;

exception
when e_length then
dbms_output.put_line('account number does not have enough digits');
when insufficient_balance then
dbms_output.put_line('You have insufficient balance to transfer money $');
when e_ifsc then
dbms_output.put_line('IFSC Code does not match bank account number');
when invalidacc then
dbms_output.put_line('Account Number is Invalid');
when no_data_found then null;
end moneytransfer;
/

exec moneytransfer(89135767380499400,'DMDD0101022',12494980148173100,'DMDD0333100',1);
exec moneytransfer(3719713158839988,'DMDD0101022',13719713158835300,'DMDD0101022',48);

-- PROCEDURE FOR LOAN TRANSFER

set serveroutput on;

create or replace procedure loantransfer (
    i_branchifsc   loan_transactions.branchifsc%TYPE,
    i_loanifsc   loan_transactions.loanifsc%TYPE,
    i_loan_acc_no   loan_transactions.loanaccnumber%TYPE,
    i_amount loan_transactions.amount%TYPE
    
) AS
    e_length exception;
    insufficient_balance exception;
    e_ifsc exception;
    invalidacc exception;
    v_lacc number;
    v_cacc number;
    v_difsc varchar(20);
    v_cifsc varchar(20);
    v_amount account.account_balance%TYPE;
    tdate date;


BEGIN

select count(*) into v_lacc from loan where i_loan_acc_no=loanaccnumber;
select count(*) into v_cifsc from loan where loanaccnumber = i_loan_acc_no;
select count(*) into v_difsc from branch where branchifsc IN (select branchifsc from branch);
select outstanding into v_amount from loan where loanaccnumber = i_loan_acc_no;
select sysdate into tdate from dual;

if length(i_loan_acc_no) > 5 then
dbms_output.put_line('Length Validated');
else
raise e_length;
end if;

if  v_lacc=1 then
dbms_output.put_line('Account Numbers Have Sucessfully been Validated');
dbms_output.put_line('..');
dbms_output.put_line('......');
dbms_output.put_line('.............');
else
raise invalidacc;
end if;

if v_cifsc = 1 and v_difsc = 1 then
dbms_output.put_line('Both IFSC Codes are Correct and Validated');
dbms_output.put_line('..');
dbms_output.put_line('......');
dbms_output.put_line('.............');
else
raise e_ifsc;
end if;

if (v_amount > i_amount) then

INSERT INTO loan_transactions (
    branchifsc,
    loanifsc,
    loanaccnumber,
    amount,
    transaction_date
) VALUES (
    i_branchifsc,
    i_loanifsc,
    i_loan_acc_no,
    i_amount,
    tdate
);

commit;
dbms_output.put_line('Transaction Successful!');
dbms_output.put_line('...');
dbms_output.put_line('........');

if(v_amount - i_amount between 0 and 1) then

UPDATE loan
SET outstanding = outstanding - i_amount, status = 'Inactive'
WHERE loanaccnumber = i_loan_acc_no;
dbms_output.put_line('Balances Updated!');

else
UPDATE loan
SET outstanding = outstanding - i_amount, status = 'Active'
WHERE loanaccnumber = i_loan_acc_no;
dbms_output.put_line('Balances Updated!');

end if;

else
raise insufficient_balance;
end if;

exception
when e_length then
dbms_output.put_line('account number does not have enough digits');
when insufficient_balance then
dbms_output.put_line('You have insufficient balance to transfer money $');
when e_ifsc then
dbms_output.put_line('IFSC Code does not match bank account number');
when invalidacc then
dbms_output.put_line('Account Number is Invalid');
when no_data_found then
dbms_output.put_line('Invalid Bank Account Number/IFSC Entered');
end loantransfer;
/

-- PROCEDURE FOR ACCOUNT DEPOSIT

create or replace procedure account_deposit (i_accnumber varchar,
i_branchifsc account.branchifsc%TYPE, i_amount varchar)
AS
v_accnumber number;
v_branchifsc number;
sysd date;
v_amount  decimal;
invalid_acc exception;
invalid_ifsc exception;
invalid exception;
balance_exceed exception;
negative exception;

BEGIN
if is_number(i_amount) = 0 then
raise invalid;
end if;
select count(*) into v_accnumber from account where accountnumber = i_accnumber;
select count(*) into v_branchifsc from account where branchifsc = i_branchifsc and  accountnumber = i_accnumber;
select sysdate into sysd from dual;

if is_number(i_accnumber) = 0  THEN
raise VALUE_ERROR;
end if;
if v_accnumber = 1 then
dbms_output.put_line('Account Number Validated Successfully');
select account_balance into v_amount from account where accountnumber = i_accnumber;
else
raise invalid_acc;
end if;
if v_branchifsc = 1 then
dbms_output.put_line('IFSC Code Validated Successfully');
else
raise invalid_ifsc;
end if;

if is_number(i_amount) = 0  THEN
raise VALUE_ERROR;
elsif (v_amount + i_amount > 99999999.99) then
raise balance_exceed;
elsif (i_amount < 0) then
raise negative;
else
dbms_output.put_line('All Validations Successful for Balance Update');
end if;

UPDATE account
SET account_balance = account_balance + i_amount
where accountnumber = i_accnumber;

INSERT INTO transactions (credit_account,ifsc_code_credit,amount,transaction_date,message,status)
VALUES (i_accnumber,i_branchifsc,i_amount,sysd,'Deposit','Pending');

dbms_output.put_line('DEPOSIT SUCCESSFUL');


EXCEPTION
when invalid_acc then
dbms_output.put_line('Account Number Does Not Exist');
when invalid_ifsc then
dbms_output.put_line('IFSC Code Incorrect or Does not Match Bank Account Number Entered');
when balance_exceed then
dbms_output.put_line('Total Deposit Value Exceeds Max Balance for Account');
when negative then
dbms_output.put_line('Negative amount can not be deposited!');
when VALUE_ERROR then
dbms_output.put_line('You have not entered a numeric value for deposit');
when invalid then
dbms_output.put_line('You have not entered a numeric value for a numeric field');
when OTHERS then 
dbms_output.put_line('You have not entered a numeric value for a numeric field');
END account_deposit;
/


-- PROCEDURE TO UPDATE ACCOUNT INTEREST

create or replace procedure account_interest_update 
AS
c number;
creation date;
p number;
chk number;
o_accnumber number;
sysd date;
cdate date;
month_add number;
temp_year date;
loopnum number;
BEGIN
select sysdate into sysd from dual;
for o in (select * from account left join account_status a on accountnumber = a.account_number)
  loop
    select created_date into cdate from account_status where account_number = o.accountnumber fetch first 1 rows only;
    
    select MONTHS_BETWEEN (sysd,cdate) into c from dual;
    p:=0;
    select trunc(c/12,0) into p from dual;
    chk:=0;
    select count(*) into chk from account_interest where account_number = o.account_number;
    loopnum := p-chk;
    if loopnum = 0 then null;
    else
    for i IN 1..loopnum LOOP
         month_add:=0;
         month_add := i*12;
         select add_months (cdate,month_add) into temp_year from dual;
         insert into account_interest (account_number,branchifsc,created_date) VALUES (o.accountnumber,o.branchifsc,temp_year);
         dbms_output.put_line ('Interest Added');
       end LOOP;
       end if;
  end loop;
end account_interest_update;
/

exec account_interest_update;

-- PROCEDURE FOR CUSTOMER ONBOARDING
CREATE OR REPLACE PROCEDURE CustomerOnboarding_AccountCreation(FirstName VARCHAR,LastName VARCHAR, DATEOFBIRTH VARCHAR,Worksat VARCHAR,Gender VARCHAR,AptNo VARCHAR, ADDRESSLINE1 VARCHAR, ADDRESSLINE2 VARCHAR, ADDRESSLINE3 VARCHAR, Zip VARCHAR, Contact VARCHAR, AccType VARCHAR, Branch CHAR, OpeningBalance VARCHAR)
AS

cid number;
anum number;
pnumber number;
---EXCEPTIONS
ID_NOT_ENTERED EXCEPTION;
ID_LENGTH EXCEPTION;
FirstNameMissing EXCEPTION;
FirstNameLength EXCEPTION;
LastNameMissing EXCEPTION;
LastNameLength EXCEPTION;
MissingDOB EXCEPTION;
IncorrectDOB EXCEPTION;
WorksAtMissing EXCEPTION;
WorksAtLength EXCEPTION;
GenderMissing EXCEPTION;
GenderIncorrect EXCEPTION;
GenderLength EXCEPTION;
ApartmentNumberMissing EXCEPTION;
ApartmentNumberLength EXCEPTION;
StreetMissing EXCEPTION ;
StreetLength EXCEPTION;
CityMissing EXCEPTION;
CityLength EXCEPTION;
StateMissing EXCEPTION;
StateLength EXCEPTION;
ZipMissing EXCEPTION;
ZipIncorrect EXCEPTION;
ContactMissing EXCEPTION;
ContactIncorrect EXCEPTION;
NUM_VALUE_ERROR EXCEPTION;
ex EXCEPTION;
AccountNumberIncorrect EXCEPTION;
AccountNumberMissing EXCEPTION;
AccountNumberLength EXCEPTION;
AccountTypeMissing EXCEPTION;
AccountTypeIncorrect EXCEPTION;
IFSCMissing EXCEPTION;
IFSCIncorrect EXCEPTION;
BalanceMissing EXCEPTION;
BalanceNegative EXCEPTION;


BEGIN 
select count(*) into pnumber from customer where phone = Contact;
if pnumber > 0 then
raise ex;
end if;
IF is_number(Zip)=0 OR is_number(Contact)=0 OR is_number(OpeningBalance)=0 THEN
    raise NUM_VALUE_ERROR;
ELSIF FirstName IS NULL THEN
    RAISE FirstNameMissing;
ELSIF LENGTH(FirstName)>20 THEN
    RAISE FirstNameLength;
ELSIF LastName IS NULL THEN
    RAISE LastNameMissing;
ELSIF LENGTH(LastName)>20 THEN
    RAISE LastNameLength;
ELSIF DATEOFBIRTH IS NULL THEN
    RAISE MissingDOB;

ELSIF Worksat IS NULL THEN
    RAISE WorksAtMissing;
ELSIF LENGTH(Worksat)>20 THEN
    RAISE WorksatLength;
ELSIF Gender IS NULL THEN
    RAISE GenderMissing;
ELSIF Gender NOT IN ('M','F','O') THEN
    RAISE GenderIncorrect;
ELSIF LENGTH(Gender)>1 THEN
    RAISE GenderLength;
ELSIF AptNo IS NULL THEN
    RAISE ApartmentNumberMissing;
ELSIF LENGTH(AptNo)>20 THEN
    RAISE ApartmentNumberLength;
ELSIF ADDRESSLINE1 IS NULL THEN
    RAISE StreetMissing;
ELSIF LENGTH(ADDRESSLINE1)>20 THEN
    RAISE StreetLength;
ELSIF ADDRESSLINE2 IS NULL THEN
    RAISE CityMissing;
ELSIF LENGTH(ADDRESSLINE2)>20 THEN
    RAISE CityLength;
ELSIF ADDRESSLINE3 IS NULL THEN
    RAISE StateMissing;
ELSIF LENGTH(ADDRESSLINE3)>2 THEN
    RAISE StateLength;
ELSIF Zip IS NULL THEN
    RAISE ZipMissing;
ELSIF LENGTH(Zip)<>5 THEN
    RAISE ZipIncorrect;
ELSIF Contact IS NULL THEN
    RAISE ContactMissing;
ELSIF LENGTH(Contact)<>10 THEN
    RAISE ContactIncorrect;

ELSIF AccType IS NULL THEN
    RAISE AccountTypeMissing;
ELSIF AccType NOT IN ('checking','savings') THEN
    RAISE AccountTypeIncorrect;
ELSIF Branch IS NULL THEN
    RAISE IFSCMissing;
ELSIF Length(Branch) <> 11 THEN
    RAISE IFSCIncorrect;
ELSIF OpeningBalance IS NULL THEN
    RAISE BalanceMissing;
ELSIF OpeningBalance<0 OR OpeningBalance=0 THEN
    RAISE BalanceNegative;
    
END IF;

---INSERTS
INSERT INTO CUSTOMER (first_name,last_name,dob,works_at,sex,apt_no,street,city,cstate,zipcode,phone) VALUES(
    FirstName,
    LastName,
    TO_DATE(DATEOFBIRTH, 'YYYY-MM-DD'),
    Worksat,
    Gender,
    AptNo,
    ADDRESSLINE1,
    ADDRESSLINE2,
    ADDRESSLINE3,
    Zip,
    Contact);
DBMS_OUTPUT.PUT_LINE('Customer Added Successfully');

    
select customer_id into cid from customer where first_name = FirstName and phone = Contact and zipcode = Zip;
    
INSERT INTO Account (account_type,branchifsc,customer_id,account_balance) VALUES (
    AccType,
    Branch,
    cid,
    OpeningBalance); 
    
DBMS_OUTPUT.PUT_LINE('Customer Account Added Successfully');
select accountnumber into anum from account where customer_id = cid;
INSERT INTO ACCOUNT_STATUS(account_number,status,created_date) VALUES(anum, 'Active', SYSDATE);

DBMS_OUTPUT.PUT_LINE('Customer Account Status is now Active');
account_deposit(anum,Branch,OpeningBalance);

---EXCEPTION HANDLING
EXCEPTION

    WHEN ID_NOT_ENTERED THEN 
    DBMS_OUTPUT.PUT_LINE('Customer ID cannot be empty');
    
    WHEN FirstNameMissing THEN
     DBMS_OUTPUT.PUT_LINE('Fisrt Name cannot be empty');
     
    WHEN LastNameMissing THEN
     DBMS_OUTPUT.PUT_LINE('Last Name cannot be empty');
     
    WHEN MissingDOB THEN
     DBMS_OUTPUT.PUT_LINE('The Date of birth cannot be empty');
    
    WHEN IncorrectDOB THEN
     DBMS_OUTPUT.PUT_LINE('The year of birth cannot be less than 2004');
     
    WHEN WorksAtMissing THEN
     DBMS_OUTPUT.PUT_LINE('Works at cannot be empty');
     
    WHEN GenderMissing THEN
     DBMS_OUTPUT.PUT_LINE('Gender cannot be empty'); 
     
    WHEN GenderIncorrect THEN
     DBMS_OUTPUT.PUT_LINE('The gender must be selected from M, F , O');  
     
    WHEN ApartmentNumberMissing THEN
     DBMS_OUTPUT.PUT_LINE('The apartment number cannot be empty');
     
    WHEN StreetMissing THEN
     DBMS_OUTPUT.PUT_LINE('The street cannot be empty');
     
    WHEN CityMissing THEN
     DBMS_OUTPUT.PUT_LINE('The city cannot be empty');
     
    WHEN ZipMissing THEN
     DBMS_OUTPUT.PUT_LINE('The zip code must be proviced');
     
    WHEN ZipIncorrect THEN
     DBMS_OUTPUT.PUT_LINE('Incorrect zipcode');
     
    WHEN IFSCMissing THEN
     DBMS_OUTPUT.PUT_LINE('The contact number cannot be empty');
     
    WHEN IFSCIncorrect THEN
     DBMS_OUTPUT.PUT_LINE('Incorrect Contact Number');
     
    WHEN AccountNumberMissing THEN
     DBMS_OUTPUT.PUT_LINE('Account Number cannot be empty');
     
    WHEN AccountNumberIncorrect THEN
     DBMS_OUTPUT.PUT_LINE('Incorrect Account Number');
     
    WHEN AccountTypeMissing THEN
     DBMS_OUTPUT.PUT_LINE('Account type is missing');
     
    WHEN AccountTypeIncorrect THEN
     DBMS_OUTPUT.PUT_LINE('Account type must be from savings/checkin');
     
    WHEN BalanceMissing THEN
     DBMS_OUTPUT.PUT_LINE('The opening balance cannot be  null');
     
    WHEN BalanceNegative THEN
     DBMS_OUTPUT.PUT_LINE('The opening balance must be positive');
     
     WHEN FirstNameLength THEN
     DBMS_OUTPUT.PUT_LINE('The first name should be less than 20 characters.');
     
     WHEN LastNameLength THEN
     DBMS_OUTPUT.PUT_LINE('The last name should be less than 20 characters.');
     
     WHEN GenderLength THEN
     DBMS_OUTPUT.PUT_LINE('The gender length must be one character from M, F, O');
     WHEN ex then
     DBMS_OUTPUT.PUT_LINE('Phone number exisits');
     WHEN ApartmentNumberLength THEN
     DBMS_OUTPUT.PUT_LINE('The Apartment Number cannot be less than 20 characters');
     WHEN StreetLength THEN
     DBMS_OUTPUT.PUT_LINE('The street length cannot be more than 20 characters');
     WHEN CityLength THEN
     DBMS_OUTPUT.PUT_LINE('The city length cannot be more than 20 characters');
     WHEN StateLength THEN
     DBMS_OUTPUT.PUT_LINE('The state length must be 2 characters.');
     WHEN AccountNumberLength THEN
     DBMS_OUTPUT.PUT_LINE('The Account Number must be 16 characters.');
     WHEN ID_Length THEN
     DBMS_OUTPUT.PUT_LINE('The ID must be 6 characters.');
     WHEN NUM_VALUE_ERROR THEN 
     DBMS_OUTPUT.PUT_LINE('The Value must be a number.');
END;
/
----testing---
set SERVEROUTPUT ON;
EXEC CustomerOnboarding_AccountCreation('Jasap', 'Flocky', '1998-05-19', 'NE', 'M', '14', 'Calumet St', 'Boston', 'MA', '12345', '9999996611','savings', 'DMDD0333100', 10000);

--SELECT * FROM ACCOUNT;
--SELECT * FROM ACCOUNT_STATUS;


-- PROCEDURE FOR LOAN REQUEST
create or replace procedure loan_request(cust_id in varchar, ifsc in varchar, i_principal in varchar, loan_type in varchar)
as
invalid_number exception;
invalid_type exception;
invalid_id exception;
is_valid int;
invalid_credentials exception;
BEGIN
    if is_number (cust_id) = 0 or is_number(loan_type) = 0 then
    raise invalid_id;
    end if;
    select max(1) into is_valid from account where customer_id = cust_id and branchifsc = ifsc;
    
    if loan_type NOT IN (1,2,3,4) then
    raise invalid_type;
    end if;
    
    if is_number (i_principal) = 0 or i_principal < 0 then
    raise invalid_number;
    end if;
    
    if is_valid is not null then
        INSERT INTO loan(customer_id, loanifsc, principal, loan_type, status) values(cust_id,ifsc,i_principal,loan_type,'Requested');
    else
        raise invalid_credentials;
    end if;
    
EXCEPTION
when invalid_credentials then
dbms_output.put_line('Provided Customer and BrachIFSC credentials do not match or are incorrect');
when invalid_number then
dbms_output.put_line('You have entered an invalid number or negative number');
when invalid_id then
dbms_output.put_line('Entered ids are not valid, check again');
when invalid_type then
dbms_output.put_line('Loan Type is Invlaid');

end loan_request;
/

-- PROCEDURE FOR LOAN INTEREST UPDATE
create or replace procedure loan_interest_update 
AS
c number;
creation date;
p number;
chk number;
o_accnumber number;
sysd date;
cdate date;
month_add number;
temp_year date;
loopnum number;
BEGIN
select sysdate into sysd from dual;
for o in (select * from loan)
  loop
    select sanction_date into cdate from loan where loanaccnumber = o.loanaccnumber fetch first 1 rows only;
    select MONTHS_BETWEEN (sysd,cdate) into c from dual;
    p:=0;
    select trunc(c/12,0) into p from dual;
    chk:=0;
    select count(*) into chk from loan_interest where loanaccnumber = o.loanaccnumber;
    loopnum := p-chk;
    if loopnum = 0 then null;
    else
    for i IN 1..loopnum LOOP
         month_add:=0;
         month_add := i*12;
         select add_months (cdate,month_add) into temp_year from dual;
         insert into loan_interest (loanaccnumber,branchifsc,loan_type,deposit_date) values (o.loanaccnumber,o.loanifsc,o.loan_type,temp_year);
         dbms_output.put_line ('Loan Interest Added');
       end LOOP;
       end if;
  end loop;
end loan_interest_update;
/

set SERVEROUTPUT ON;
exec loan_interest_update;

-- PROCEDURE CURRENT BALANCE

create or replace procedure current_balance
AS
BEGIN
for o in (select * from account)
  loop
  insert into transactions (credit_account,ifsc_code_credit,amount,transaction_date,message,status) VALUES (o.accountnumber,o.branchifsc,o.account_balance,sysdate,'Current Balance','Success');
  dbms_output.put_line ('Current Balance Updated');
  end loop;
end;
/
  
exec current_balance;

-- PROCEDURE FOR ACCOUNT STATEMENT

create or replace PROCEDURE account_statement(acc_no varchar,
    mycursor OUT SYS_REFCURSOR )
AS
invalid exception;
l_amount number;
BEGIN
  if is_number(acc_no) = 0 then
  raise invalid;
  end if;
  OPEN mycursor FOR select transaction_date,  debit_account as From_account, credit_account as To_account, amount, 
                    sum(case when  credit_account=debit_account then amount
                    when debit_account = acc_no then -1*amount else amount end) over(order by transaction_date) balance
                    from (
                        select  transaction_date,  to_char(debit_account) debit_account, to_char(credit_account) credit_account, amount
                        from transactions
                        where credit_account = acc_no


                        union

                        select transaction_date,  to_char(debit_account) debit_account, to_char(credit_account) credit_account, amount
                        from transactions
                        where debit_account = acc_no
                        
                        
                    ) a
                    order by transaction_date;
                    
                    select balance into l_amount from (select transaction_date,  debit_account as From_account, credit_account as To_account, amount, 
                    sum(case when  credit_account=debit_account then amount
                    when debit_account = acc_no then -1*amount else amount end) over(order by transaction_date) balance
                    from (
                        select  transaction_date,  to_char(debit_account) debit_account, to_char(credit_account) credit_account, amount
                        from transactions
                        where credit_account = acc_no


                        union

                        select transaction_date,  to_char(debit_account) debit_account, to_char(credit_account) credit_account, amount
                        from transactions
                        where debit_account = acc_no
                        
                        
                    ) a
                    order by transaction_date desc fetch first 1 rows only);
                    update account
                    set account_balance = l_amount
                    where accountnumber = acc_no;
                    
EXCEPTION
when invalid then
dbms_output.put_line('You have entered a non numeric value for account number');
END account_statement;

--select * from account where accountnumber=13719713158835300;

/

declare mycursor SYS_REFCURSOR;
begin
    account_statement(13719713158835300, mycursor);
    DBMS_SQL.RETURN_RESULT(mycursor);
end;
/

select * from account where accountnumber = 13719713158835300;

-- PROCEDURE FOR SALARY UPDATE
CREATE OR REPLACE PROCEDURE PROMOTION(EMP varchar, POST IN VARCHAR)
AS

EMP_COUNT NUMBER := 0;
PREV_SALARY NUMBER := 0;
SAL NUMBER := 0;
CUR_POS VARCHAR(20);
PARENT_CHILD EXCEPTION;
invalid EXCEPTION;
PRAGMA EXCEPTION_INIT(PARENT_CHILD, -02291);


BEGIN 

if is_number(EMP) = 0 then
raise invalid;
end if;

SELECT COUNT(*)
INTO EMP_COUNT 
FROM EMPLOYEE
WHERE EMPLOYEE_ID = EMP;

IF EMP_COUNT > 0 THEN

    SELECT SALARY INTO
    PREV_SALARY
    FROM EMPLOYEE
    WHERE EMPLOYEE_ID = EMP;
    
    SELECT EMP_ROLE INTO
    CUR_POS
    FROM EMPLOYEE
    WHERE EMPLOYEE_ID = EMP;
    
        IF LOWER(POST) = 'accountant' AND LOWER(CUR_POS) NOT IN ('banker','lic','provisionary officer')  THEN
            
            SAL := (PREV_SALARY + 5000);
            
            UPDATE EMPLOYEE 
            SET EMP_ROLE = POST,
            SALARY = SAL
            WHERE EMPLOYEE_ID=EMP;
		DBMS_OUTPUT.PUT_LINE('SUCCESSFULLY PROMOTED');
            
            ELSIF  LOWER(POST) = 'provisionary officer' AND LOWER(CUR_POS) NOT IN ('banker','lic')  THEN
            
            SAL := (PREV_SALARY + 15000);
            
            UPDATE EMPLOYEE 
            SET EMP_ROLE = POST,
            SALARY = SAL
            WHERE EMPLOYEE_ID=EMP;
		DBMS_OUTPUT.PUT_LINE('SUCCESSFULLY PROMOTED');
            
            ELSIF LOWER(POST) = 'banker' AND LOWER(CUR_POS) NOT IN ('banker')  THEN
            
            SAL := (PREV_SALARY + 25000);
            
            UPDATE EMPLOYEE 
            SET EMP_ROLE = POST,
            SALARY = SAL
            WHERE EMPLOYEE_ID=EMP;
		DBMS_OUTPUT.PUT_LINE('SUCCESSFULLY PROMOTED');
            
             ELSIF LOWER(POST) = 'lic' AND LOWER(CUR_POS) NOT IN ('banker', 'provisionary officer')  THEN
            
            SAL := (PREV_SALARY + 10000);
            
            UPDATE EMPLOYEE 
            SET EMP_ROLE = POST,
            SALARY = SAL
            WHERE EMPLOYEE_ID=EMP;
		DBMS_OUTPUT.PUT_LINE('SUCCESSFULLY PROMOTED');
             
        END IF;
ELSE 

    DBMS_OUTPUT.PUT_LINE('NO SUCH EMPLOYEE');

END IF;      

EXCEPTION 
    WHEN INVALID THEN
    DBMS_OUTPUT.PUT_LINE('You have not entered a numeric value for a numeric entry');
    WHEN PARENT_CHILD THEN
    DBMS_OUTPUT.PUT_LINE('PLEASE UPDATE PARENT TABLE FIRST');
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('INVALID ERROR');
   
END;
/

--select * from employee ;
exec promotion(113104,'banker');

-- ANON BLOCK FOR DROPPING INDEX

DECLARE index_count INTEGER;
BEGIN
SELECT COUNT(*) INTO index_count
    FROM USER_INDEXES
    WHERE INDEX_NAME = 'ACCOUNT_ID_INDEX';

IF index_count > 0 THEN
    EXECUTE IMMEDIATE 'DROP INDEX ACCOUNT_ID_INDEX';
END IF;
END;
/


-- INDEX 

CREATE INDEX ACCOUNT_ID_INDEX 
ON ACCOUNT_STATUS(Account_Number);
--this is what we should do in order to explain the storage                                       
EXPLAIN PLAN FOR
SELECT * FROM ACCOUNT_STATUS
WHERE Account_Number = 3719713158835300;

SELECT 
    PLAN_TABLE_OUTPUT 
FROM 
    TABLE(DBMS_XPLAN.DISPLAY());

